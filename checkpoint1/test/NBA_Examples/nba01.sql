CREATE TABLE PLAYERS(ID string, FIRSTNAME string, LASTNAME string, FIRSTSEASON int, LASTSEASON int, WEIGHT int, BIRTHDATE date);

SELECT FIRSTNAME, LASTNAME, WEIGHT, BIRTHDATE 
FROM PLAYERS 
WHERE PLAYERS.WEIGHT>200;

ProjectionNode
|
WhereNode
|
TableNode

--groupby
--pass
SELECT COUNT(FIRSTNAME),FIRSTSEASON,LASTSEASON FROM PLAYERS GROUP BY FIRSTSEASON,LASTSEASON;
SELECT COUNT(FIRSTNAME),WEIGHT FROM PLAYERS GROUP BY WEIGHT;
--todo
SELECT COUNT(PLAYERS.FIRSTNAME),PLAYERS.FIRSTSEASON,PLAYERS.LASTSEASON FROM PLAYERS GROUP BY PLAYERS.FIRSTSEASON,PLAYERS.LASTSEASON;


--todo
SELECT LASTSEASON-FIRSTSEASON AS YEARS FROM PLAYERS;

SELECT SUM(WEIGHT),FIRSTSEASON FROM PLAYERS GROUP BY FIRSTSEASON;

SELECT FIRSTSEASON, SUM(WEIGHT) from PLAYERS GROUP BY FIRSTSEASON;

--alies--
--pass
SELECT FIRSTNAME,LASTNAME,WEIGHT,BIRTHDATE FROM PLAYERS P1;
--pass
SELECT P1.FIRSTNAME, P1.LASTNAME FROM (SELECT FIRSTNAME, LASTNAME FROM PLAYERS) P1;

--pass
SELECT C FROM(SELECT WEIGHT AS C FROM PLAYERS) WHERE C>200;

--allTableName--
--pass
SELECT PLAYERS.FIRSTNAME,PLAYERS.LASTNAME,PLAYERS.WEIGHT FROM PLAYERS;

--rename--
SELECT A,B,C FROM (SELECT FISRTNAME AS A, LASTNAME AS B, WEIGHT AS C FROM PLAYERS);

--sub select
SELECT FIRSTNAME, LASTNAME, WEIGHT, BIRTHDATE FROM (SELECT FIRSTNAME, LASTNAME,FIRSTSEASON, WEIGHT, BIRTHDATE FROM PLAYERS);
--simple join
SELECT FIRSTNAME, LASTNAME, WEIGHT, BIRTHDATE FROM PAYERS P1,PLAYERS P2,PLAYERS P3;


SELECT FIRSTNAME, LASTNAME, WEIGHT, BIRTHDATE FROM (SELECT FIRSTNAME FROM PAYERS) P1,(SELECT LASTNAME FROM PLAYERS) P2;

SELECT P1_FIRSTNAME, P1_LASTNAME,
       P2_FIRSTNAME, P2_LASTNAME
FROM (
  SELECT P1.FIRSTNAME AS P1_FIRSTNAME, P1.LASTNAME AS P1_LASTNAME,
         P2.FIRSTNAME AS P2_FIRSTNAME, P2.LASTNAME AS P2_LASTNAME,
         P1.FIRSTSEASON AS P1_FIRSTSEASON, P1.LASTSEASON AS P1_LASTSEASON,
         P2.FIRSTSEASON AS P2_FIRSTSEASON, P2.LASTSEASON AS P2_LASTSEASON
    FROM PLAYERS P1, PLAYERS P2
  WHERE P1.ID<>P2.ID
  ) SUB_Q
WHERE P1_FIRSTSEASON<P2_FIRSTSEASON
  AND P1_LASTSEASON>P2_LASTSEASON;

--test--
SELECT NAVY.PERMANENT + NAVY.PERMANENT + NAVY.DEPOSITS + 5.165142832384583 * NAVY.ENGAGE + NAVY.PERMANENT AS OUTPUT_1, NAVY.PERMANENT + NAVY.ENGAGE + 9.636576790472066 + NAVY.PERMANENT + NAVY.PERMANENT + NAVY.PERMANENT AS OUTPUT_2, NAVY.PERMANENT + NAVY.PERMANENT + NAVY.ENGAGE * NAVY.ENGAGE + NAVY.DEPOSITS + NAVY.DEPOSITS AS OUTPUT_3, NAVY.PERMANENT + 6.45006719254074 + NAVY.ENGAGE + NAVY.PERMANENT AS OUTPUT_4 FROM NAVY;

--这个query就可以优化成natural join，然后使用上算法
SELECT
LINEITEM.ORDERKEY,
SUM(LINEITEM.EXTENDEDPRICE*(1-LINEITEM.DISCOUNT)) AS REVENUE,
ORDERS.ORDERDATE,
ORDERS.SHIPPRIORITY
FROM
CUSTOMER,
ORDERS,
LINEITEM
WHERE
CUSTOMER.MKTSEGMENT = 'BUILDING' AND CUSTOMER.CUSTKEY = ORDERS.CUSTKEY
AND LINEITEM.ORDERKEY = ORDERS.ORDERKEY
AND ORDERS.ORDERDATE < DATE('1995-03-28')
AND LINEITEM.SHIPDATE > DATE('1995-03-28')
GROUP BY LINEITEM.ORDERKEY, ORDERS.ORDERDATE, ORDERS.SHIPPRIORITY
ORDER BY REVENUE DESC, ORDERDATE
LIMIT 10;

--test
SELECT
NATION.NAME,
SUM(LINEITEM.EXTENDEDPRICE * (1 - LINEITEM.DISCOUNT)) AS REVENUE
FROM
REGION, NATION, CUSTOMER, ORDERS, LINEITEM, SUPPLIER
WHERE
CUSTOMER.CUSTKEY = ORDERS.CUSTKEY
AND LINEITEM.ORDERKEY = ORDERS.ORDERKEY
AND LINEITEM.SUPPKEY = SUPPLIER.SUPPKEY
AND CUSTOMER.NATIONKEY = NATION.NATIONKEY
AND SUPPLIER.NATIONKEY = NATION.NATIONKEY
AND NATION.REGIONKEY = REGION.REGIONKEY
AND REGION.NAME = 'EUROPE'
AND ORDERS.ORDERDATE >= DATE('1995-01-01')
AND ORDERS.ORDERDATE < DATE('1996-01-01')
GROUP BY NATION.NAME
ORDER BY REVENUE DESC;